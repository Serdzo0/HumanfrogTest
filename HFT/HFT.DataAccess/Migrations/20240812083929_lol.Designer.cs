// <auto-generated />
using System;
using HFT.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HFT.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240812083929_lol")]
    partial class lol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HFT.Models.ReservationModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("imgURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoomID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("HFT.Models.RoomModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Cena = 300.0,
                            LongDescription = "Velika soba za 6 ljudi ima 2 spalnici 3 kopalnice in raztegljivo sofo z velikim dnevnim prostorom in balkonom ki ima pogled na morje",
                            Name = "Velika soba",
                            ShortDescription = "Velika soba za 6 ljudi s pogledom na morje!"
                        },
                        new
                        {
                            ID = 2,
                            Cena = 300.0,
                            LongDescription = "Velika soba za 6 ljudi ima 2 spalnici 3 kopalnice in raztegljivo sofo z velikim dnevnim prostorom in balkonom ki ima pogled na morje",
                            Name = "Velika soba2",
                            ShortDescription = "Velika soba za 6 ljudi s pogledom na morje!"
                        },
                        new
                        {
                            ID = 3,
                            Cena = 150.0,
                            LongDescription = "Velika soba za 6 ljudi ima 2 spalnici 3 kopalnice in raztegljivo sofo z velikim dnevnim prostorom in balkonom ki ima pogled na morje",
                            Name = "Majhna soba",
                            ShortDescription = "Majhna soba za 3 ljudi s pogledom na morje!"
                        },
                        new
                        {
                            ID = 4,
                            Cena = 150.0,
                            LongDescription = "Velika soba za 6 ljudi ima 2 spalnici 3 kopalnice in raztegljivo sofo z velikim dnevnim prostorom in balkonom ki ima pogled na morje",
                            Name = "Majhna soba2",
                            ShortDescription = "Majhna soba za 3 ljudi s pogledom na morje!"
                        },
                        new
                        {
                            ID = 5,
                            Cena = 500.0,
                            LongDescription = "Penthouse za 2 ima spalnico s svojim balkonom in televizijo in 2 kopalnice ter velik dnevni prostor z vhodom na teraso. Ima še prostor za pisarno.",
                            Name = "Penthouse",
                            ShortDescription = "Penthouse za 2"
                        });
                });

            modelBuilder.Entity("HFT.Models.ReservationModel", b =>
                {
                    b.HasOne("HFT.Models.RoomModel", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });
#pragma warning restore 612, 618
        }
    }
}
